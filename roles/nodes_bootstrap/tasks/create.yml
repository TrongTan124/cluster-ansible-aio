---
- import_tasks: enable_nested_virt.yml
  when: nested_virt_enabled | bool

# - name: Populate /etc/hosts file
#   lineinfile:
#     path: /etc/hosts
#     insertafter: EOF
#     line: "{{ hostvars[item]['ansible_' + node_internal_intf]['ipv4']['address'] }}  {{ hostvars[item]['inventory_hostname'] }}"
#   with_items: "{{ groups['nodes'] }}"

# - name: Add search domain to /etc/resolv.conf file
#   lineinfile:
#     path: /etc/resolv.conf
#     insertafter: EOF
#     line: "search {{ dns_domain }}"

#- name: Set hostname
#  hostname:
#    name: "{{ inventory_hostname }}"

# Disabled for Kolla
# Enabled for OpenShift

# - name: Disable SELinux
#   selinux:
#     state: disabled
#   when: ansible_distribution|lower == "centos"

- name: Add Centos repo
  yum_repository:
    name: epel
    description: EPEL YUM repo
    baseurl: https://download.fedoraproject.org/pub/epel/$releasever/$basearch/
    gpgcheck: no
  when: ansible_distribution|lower == "centos"

- name: Add Ubuntu standard xenial repo
  apt_repository:
    repo: "deb http://archive.ubuntu.com/ubuntu/ xenial main restricted"
    state: present
  when: ansible_distribution|lower == "ubuntu"

- name: Add Ubuntu standard xenial-security repo
  apt_repository:
    repo: "deb http://security.ubuntu.com/ubuntu xenial-security main restricted"
    state: present
    update_cache: "yes"
  when: ansible_distribution|lower == "ubuntu"

- name: Wait for automatic Ubuntu system updates
  shell: while sudo fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do sleep 1; done;
  when: ansible_distribution|lower == "ubuntu"

- import_tasks: enable_apt_proxy.yml
  when: apt_cache_enabled | bool
  tags: apt_cache

- name: Wait for automatic Ubuntu system updates
  shell: while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 1; done;
  when: ansible_distribution|lower == "ubuntu"

- name: Install CentOS packages
  yum:
    name: "{{ item }}"
    update_cache: yes
  with_items: "{{ yum_packages }}"
  when: ansible_distribution|lower == "centos"

- name: Install Ubuntu packages
  apt:
    name: "{{ item }}"
    state: latest
    update_cache: "yes"
  with_items: "{{ apt_packages }}"
  when: ansible_distribution|lower == "ubuntu"

- name: Start NTP service
  systemd:
    name: "{{ 'ntp' if ansible_distribution|lower == 'ubuntu' else 'ntpd' }}"
    enabled: yes
    state: started

- name: Start NetworkManager service
  systemd:
    name: "NetworkManager"
    enabled: yes
    state: started
  when: network_manager_enabled | bool

- import_tasks: configure_ssh.yml
  tags: ssh
